// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  password      String
  image         String?
  role          Role       @default(USER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userTests     UserTest[]
}

model Subject {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  icon      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tests     Test[]
}

model Test {
  id          String     @id @default(cuid())
  title       String
  slug        String
  level       Level
  description String?
  timeLimit   Int        @default(1200) // em segundos (20 minutos padr√£o)
  isActive    Boolean    @default(true)
  subjectId   String
  subject     Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  questions   Question[]
  userTests   UserTest[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([slug, subjectId])
}

model Question {
  id         String   @id @default(cuid())
  order      Int
  text       String   @db.Text
  imageUrl   String?
  testId     String
  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  options    Option[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userAnswers UserAnswer[]

  @@unique([testId, order])
}

model Option {
  id         String   @id @default(cuid())
  text       String
  isCorrect  Boolean  @default(false)
  order      String   // 'a', 'b', 'c', 'd', 'e'
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userAnswers UserAnswer[]

  @@unique([questionId, order])
}

model UserTest {
  id        String       @id @default(cuid())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  testId    String
  test      Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
  score     Float?
  startedAt DateTime     @default(now())
  finishedAt DateTime?
  answers   UserAnswer[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@unique([userId, testId, startedAt])
}

model UserAnswer {
  id         String   @id @default(cuid())
  userTestId String
  userTest   UserTest @relation(fields: [userTestId], references: [id], onDelete: Cascade)
  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  optionId   String?
  option     Option?  @relation(fields: [optionId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userTestId, questionId])
}

model Lead {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Level {
  INICIANTE
  INTERMEDIARIO
  AVANCADO
  EXPERT
}
